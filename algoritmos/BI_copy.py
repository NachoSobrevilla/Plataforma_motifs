import pandas as pd

from collections import defaultdict
from time import time
from typing import DefaultDict


class basado_indices(object):

   def __init__(self, s = '', min_sup=2, debug = False, pos={}, keys_seqs = '0', patrones ={}, debugTime = False, csv = False):
      self.sequence=s
      self.min_sup=min_sup
      self.debug = debug
      self.debugTime = debugTime
      self.pos = pos
      self.keys_seqs = keys_seqs
      self.patrones = patrones
      self.csv = csv

   
   def set_sequence(self, sequence =''):
      self.sequence = sequence
   
   def get_sequence(self):
      return self.sequence
   
   def set_minsup(self, min_sup = 0):
      self.min_sup = min_sup
   
   def get_minsup(self):
      return self.min_sup
   
   def set_debug(self, debug=False):
      self.debug = debug
   
   def get_debug(self):
      return self.debug

   def set_debugtime(self, debugTime=False):
      self.debugTime = debugTime
   
   def get_debugtime(self):
      return self.debugTime
   
   def set_pos(self, pos ={}):
      self.pos = pos

   def get_pos(self):
      return self.pos

   def set_patrones(self, patrones={}):
      self.patrones = patrones

   def get_patrones(self):
      return self.patrones

   def get_only_patrones(self):
      return self.patrones.keys()

   def get_only_patron_pos(self):
      return self.patrones.values()

   def update_patrones(self, patrones={}):
      self.patrones.update(patrones)
   
   def set_keys_seqs(self, keys_seqs = '0'):
      self.keys_seqs = keys_seqs

   def get_keys_seqs(self):
      return self.keys_seqs

   def get_lenpos(self):
      return len(self.pos)

   # def getKeysPos(self):
   #    return [k for k in self.pos.keys()]

   def set_csv(self, csv = False):
      self.csv = csv

   def get_csv(self):
      return self.csv
   
   


   def run(self):
      candidates = []
      candidates2 = []
      candidates3 = []

      csv = DefaultDict(list)


      i = 0
      
      
      if self.get_lenpos() == 0:
         self.pos = self.find_pos()

      if self.debug == True:
         self.print_candidates(dict_pos=self.get_pos(), itera=i)
      # candidates.extend(list(pos.keys()))
      # print(pos)
      
      # :  # Para cada candidato y sus posiciones
         # print(key)
         # x = {b:[v for v in values if v+len(key) < len(self.sequence) if self.sequence[v + len(key)] == b ] for b in bases}
      # x = dict(filter(lambda x: len(x[1]) <= self.min_sup, 

      # x = {
      #       key+b: [v for v in values if v+len(key) < len(self.sequence) if self.sequence[v + len(key)] == b]  
      #          for key, values in pos.items() 
      #          for b in bases
      #       } #.items()))

      # x = {
      #       key+self.sequence[v+len(key)]: list(map(lambda x: v)) 
      #       for key,values in pos.items() for v in values if v+len(key) < len(self.sequence)
      #    }  # .items()))
      # print('Lista: ',x)
      
      
      while  self.get_lenpos() != 0:
         # z = {b: [v for v in values if self.sequence[v+len(key)] == b if v+len(
            # key) < len(self.sequence)] for key, values in pos.items() for b in bases}
         # print(z)
         # x = {key.join(self.sequence[v+len(key)]):[v for v in values if v+len(key)<len(self.sequence)] for key,values in pos.items()}
         # print(x)
         # start = time()
         # for key, values in pos.items(): #Para cada candidato y sus posiciones 
         #    # x = {b:[v for v in values if v+len(key) < len(self.sequence) if self.sequence[v+len(key)] == b] for b in bases}
         #    # print(x)
         #    for v in values: #Para las posiciones 
         #       if v+len(key) < len(self.sequence):
         #          # new_pos[key+self.sequence[v+len(key)]].append(v)
         #          # pass
         #          x=self.sequence[v+len(key)]
         #          if key+x in new_pos: # Si los candidatos estan dentro de la lista
         #             new_pos[key+x].append(v)
         #          else: # En caso de que no
         #             new_pos[key+x] = [v]
         # # y = {self.sequence[v+len(key)]: v for key in pos.keys() for values in pos.values() for v in values if v+len(key) < len(self.sequence)}
         # # t2 = timer()
         # end = time()
         # print("version1: "+str(end - start))
         
         # start = time()
         # for key, values in pos.items():  # Para cada candidato y sus posiciones
         #    for v in values:  # Para las posiciones
         #       if v+len(key) < len(self.sequence):
         #          new_pos1[key+self.sequence[v+len(key)]].append(v)
         # end = time()
         # print("version2: "+str(end - start))


         # start = time()
         # new_pos2 = {
         #     key+b: [v for v in values if v+len(key) < len(self.sequence) if self.sequence[v + len(key)] == b]
         #     for key, values in pos.items()
         #     for b in bases   
         # }
         # end = time()
         # print("version3: "+str(end - start))
         if self.csv == True:
            start = time()
         
         # candidates.extend(self.find_next_pos_v1())
         # print('iter', i)
         # candidates3.extend(self.find_next_pos_v3())
         self.find_next_pos_v3()
         
         # candidates2.extend(self.find_next_pos_v2())

         if self.csv == True:
            end = time()
            csv[i].append(
               float(end - start))
         
         

         i += 1
         if self.debug == True:
            self.print_candidates(dict_pos=self.get_pos(), itera=i)

         # self.pos.clear()
         # print(new_pos)
         # print({nkey: nvalue for nkey, nvalue in new_pos.items() if len(nvalue) >= self.min_sup})
         # start = time()
         # self.setPos({key: value for key, value in new_pos.items() if len(value) >= self.min_sup})
         # end = time()
         # print("Resultado1: "+str(end - start))

         # start = time()
         # pos1 = new_pos1.copy
         # end = time()
         # print("Resultado2: "+str(end - start))

         # start = time()
         # pos2 = {key: value for key, value in new_pos2.items() if len(value) >= self.min_sup}
         # end = time()
         # print("Resultado3: "+str(end - start))

         
         # pos = dict(filter(lambda x: len(x[1]) <= self.min_sup,new_pos))

         # new_pos.clear()
         # new_pos1.clear()
         # new_pos2.clear()

         # if self.debug == True:
         #    print('Candidatos Encontrados: ', *list(self.pos.keys()), '\n')

         # if self.getLenPos() > 0:
         #    candidates.extend(list(sorted(self.pos.keys(), key=lambda x: x)))

      
      if self.debug == True:
         print(', '.join(str(c) for c in candidates3))
      
      if self.csv == True:
         df = pd.DataFrame(columns=csv.keys(), data=csv)
         df.to_csv('prueba_v3_++.csv')
      
      # return candidates3
      
   def find_pos(self, bases='ACGT'):
      """Funci√≥n dedicada a la busqueda inicial 
      de las posiciones de los nucleotidos en 
      las secuencias de ADN"""
      # r_value = {}
      # list_pos = []
      return {n:[pos for pos in range(len(self.sequence)) if self.sequence[pos] == n] for n in bases}
      # for n in bases: # Para cada base 
         # p = 0
         # while p != -1: # Si p es diferente de -1 (-1 indica que ya no )

         #    p = s.find(n,p)
         #    if p != -1:
         #       list_pos.append(p)
         #       p+=1

         # list_pos1 = [pos for pos in range(len(s)) if s[pos]== n]

         # r_value1 = {n}
         # r_value = 
         # r_value[n] = list(list_pos)
         # list_pos.clear()
      
      # return r_value
   
   # r_value = 

   def find_next_pos_v1(self):
      new_pos = {}

      if self.debugTime == True: 
         start = time()
      
      for key, values in self.pos.items():  # Para cada candidato y sus posiciones
         for v in values:  # Para las posiciones
            if v+len(key) < len(self.sequence):
               x = self.sequence[v+len(key)]
               if key+x in new_pos:  # Si los candidatos estan dentro de la lista
                  new_pos[key+x].append(v)
               else:  # En caso de que no
                  new_pos[key+x] = [v]
      
      self.pos.clear()     
      self.set_pos({key: value for key, value in new_pos.items()
                   if len(value) >= self.min_sup})

      
      if self.debugTime == True:
         end = time()
         print("version1: "+str(end - start))
      
      return self.pos.keys()


   def find_next_pos_v2(self):
      new_pos=defaultdict(list)


      if self.debugTime == True:
         start = time()
      
      for key, values in self.pos.items():  # Para cada candidato y sus posiciones
         for v in values:  # Para las posiciones
            if v+len(key) < len(self.sequence):
               new_pos[key+self.sequence[v+len(key)]].append(v)
      
      self.pos.clear()
      self.set_pos(new_pos)
      
      if self.debugTime == True:
         end = time()
         print("version2: "+str(end - start))
      
      return self.pos.keys()


   def find_next_pos_v3(self, bases= ['A','C','G','T']):
      if self.debugTime == True:
         start = time()

      new_pos = {
          key+b: [v for v in values if v+len(key) < len(self.sequence) if self.sequence[v + len(key)] == b]
          for key, values in self.pos.items()
          for b in bases
      }

      

      self.set_pos({key: value for key, value in new_pos.items() if len(value)
              >= self.min_sup})

      if self.debugTime == True:
         end = time()
         print("version3: "+str(end - start))

      self.update_patrones(self.get_pos())


      # return self.pos.keys()

   def info_patrones(self):
      return {"Configuracion": {
                           "Algoritmo": "Basado en indices",
                           "min_sup": self.get_minsup(),
                           "Realizado en": "text/archivo FASTA",
                           "No. de sequencias ananlizadas": len(self.get_dbsequence()),
                           "No. Patrones Hallados": len(self.get_patrones())
                           },
               "Patrones": [{
                           "Patron": key, 
                           "Longitud": len(key),
                           "Ocurrencias": len(values),
                           "Posiciones":[{"sequencia":self.keys_seqs,
                                          "posicion":pos+1}
                                         for pos in values]
                        } for key, values in self.patrones.items()]}
      # self.keys_seqs.update({key:[{ 
      #                        "longitud":len(key), 
      #                        "Frecuencia":len(values),
      #                        "Ocurrencia":"Poscional",
      #                        "posiciones":list(values)}]
      #                      for key, values in  self.pos.items()})

      # # frecuent_list2.update({key: {"longitud": len(key), "ocurrencias_sec": len(pos), "ocurrencias": value, "posiciones": pos}
      #                        for key, value in candidates.items()
      #                        for cand, pos in loc.items()
      #                        if value >= self.min_sup if key == cand})
     
         
   def print_candidates(self, dict_pos={}, itera=0):
      pos = ''
      line = '-----------------------------------------------------------------------------------------'

      for key, value in dict_pos.items():
         pos += '|   '+key+': ' + ', '.join(str(v) for v in value) + '   |\n '
         pos += line+'\n'

      print('iteracion '+str(itera)+'\n'+pos)


# sequence = 'ACGTGTAAAACTCTTGTT'
# sequence = 'ACGTGTAAAACTCTTGTTACGTGTAAAACTCTTGTTACGTGTAAAACTCTTGTTACGTGTAAAACTCTTGTTACGTGTAAAACTCTTGTTACGTGTAAAACTCTTGTTACGTGTAAAACTCTTGTTACGTGTAAAACTCTTGTTACGTGTAAAACTCTTGTTACGTGTAAAACTCTTGTTACGTGTAAAACTCTTGTTACGTGTAAAACTCTTGTTACGTGTAAAACTCTTGTTACGTGTAAAACTCTTGTTACGTGTAAAACTCTTGTTACGTGTAAAACTCTTGTTACGTGTAAAACTCTTGTTACGTGTAAAACTCTTGTTACGTGTAAAACTCTTGTTACGTGTAAAACTCTTGTTACGTGTAAAACTCTTGTTACGTGTAAAACTCTTGTTACGTGTAAAACTCTTGTTACGTGTAAAACTCTTGTTACGTGTAAAACTCTTGTTACGTGTAAAACTCTTGTTACGTGTAAAACTCTTGTTACGTGTAAAACTCTTGTTACGTGTAAAACTCTTGTTACGTGTAAAACTCTTGTTACGTGTAAAACTCTTGTTACGTGTAAAACTCTTGTTACGTGTAAAACTCTTGTTACGTGTAAAACTCTTGTTACGTGTAAAACTCTTGTTACGTGTAAAACTCTTGTTACGTGTAAAACTCTTGTTACGTGTAAAACTCTTGTTACGTGTAAAACTCTTGTTACGTGTAAAACTCTTGTTACGTGTAAAACTCTTGTTACGTGTAAAACTCTTGTTACGTGTAAAACTCTTGTTACGTGTAAAACTCTTGTTACGTGTAAAACTCTTGTTACGTGTAAAACTCTTGTTACGTGTAAAACTCTTGTTACGTGTAAAACTCTTGTTACGTGTAAAACTCTTGTTACGTGTAAAACTCTTGTTACGTGTAAAACTCTTGTTACGTGTAAAACTCTTGTTACGTGTAAAACTCTTGTTACGTGTAAAACTCTTGTTACGTGTAAAACTCTTGTTACGTGTAAAACTCTTGTTACGTGTAAAACTCTTGTTACGTGTAAAACTCTTGTTACGTGTAAAACTCTTGTTACGTGTAAAACTCTTGTTACGTGTAAAACTCTTGTTACGTGTAAAACTCTTGTTACGTGTAAAACTCTTGTTACGTGTAAAACTCTTGTTACGTGTAAAACTCTTGTTACGTGTAAAACTCTTGTTACGTGTAAAACTCTTGTTACGTGTAAAACTCTTGTTACGTGTAAAACTCTTGTTACGTGTAAAACTCTTGTTACGTGTAAAACTCTTGTTACGTGTAAAACTCTTGTTACGTGTAAAACTCTTGTTACGTGTAAAACTCTTGTTACGTGTAAAACTCTTGTTACGTGTAAAACTCTTGTTACGTGTAAAACTCTTGTTACGTGTAAAACTCTTGTTACGTGTAAAACTCTTGTTACGTGTAAAACTCTTGTT'
# sequence = ''

# sequence = 'ACGTGTAAAACTCTTGTT' #'CTAAGTCCGTAGCCGACT'
# min_sup = 2
# bi = basado_indices(sequence, min_sup, debug=False, debugTime=False, csv=True)
# bi.set_pos(bi.find_pos())
# candidates = bi.run()      
# print(candidates)
# print(bi.get_pos())
# print(bi.info_patrones())


